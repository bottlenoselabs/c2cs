{"type":"object","properties":{"directory":{"type":"string","description":"Path of the input and output abstract syntax tree directory. By default, the directory will be used to write a \u0060.json\u0060 file for each target platform\u0027s abstract syntax tree that has been extracted. By default, the same abstract syntax tree \u0060.json\u0060 files will then be read when generating C# code."},"ast":{"type":"object","properties":{"WorkingDirectory":{"type":"string"},"input_file":{"type":"string","description":"Path of the input \u0060.h\u0060 header file containing C code."},"platforms":{"type":"object","additionalProperties":{"type":"object","properties":{"find_sdk":{"type":"boolean","description":"Determines whether the software development kit (SDK) for C/C\u002B\u002B is attempted to be found. Default is \u0060true\u0060. If \u0060true\u0060, the C/C\u002B\u002B header files for the current operating system are attempted to be found by some reasonable means. If the C/C\u002B\u002B header files can not be found, then an error is generated which halts the program. If \u0060false\u0060, the C/C\u002B\u002B header files will likely be missing causing Clang to generate parsing errors which also halts the program. In such a case, the missing C/C\u002B\u002B header files can be supplied to Clang using the \u0060ClangArguments\u0060 property such as \u0022-isystemPATH/TO/SYSTEM/HEADER/DIRECTORY\u0022"},"include":{"type":"array","items":{"type":"string","description":"Search directory paths to use for \u0060#include\u0060 usages when parsing C code."},"description":"Search directory paths to use for \u0060#include\u0060 usages when parsing C code."},"defines":{"type":"array","items":{"type":"string","description":"Object-like macros to use when parsing C code."},"description":"Object-like macros to use when parsing C code."},"exclude":{"type":"array","items":{"type":"string","description":"C header file names to exclude. File names are relative to the \u0060IncludeDirectories\u0060 property."},"description":"C header file names to exclude. File names are relative to the \u0060IncludeDirectories\u0060 property."},"function_names":{"type":"array","items":{"type":"string","description":"The C function names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u003C\u0060, no white list applies. Note that C function names which are excluded also exclude any transitive types."},"description":"The C function names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u003C\u0060, no white list applies. Note that C function names which are excluded also exclude any transitive types."},"opaque_names":{"type":"array","items":{"type":"string","description":"Type names that may be found when parsing C code that will be interpreted as opaque types. Opaque types are often used with a pointer to hide the information about the bit layout behind the pointer."},"description":"Type names that may be found when parsing C code that will be interpreted as opaque types. Opaque types are often used with a pointer to hide the information about the bit layout behind the pointer."},"clang_arguments":{"type":"array","items":{"type":"string","description":"Additional Clang arguments to use when parsing C code."},"description":"Additional Clang arguments to use when parsing C code."}},"description":"The target platform configurations for extracting the abstract syntax trees. Each target platform is a Clang target triple. See the C2CS docs for more details about what target platforms are available."},"description":"The target platform configurations for extracting the abstract syntax trees. Each target platform is a Clang target triple. See the C2CS docs for more details about what target platforms are available."}},"description":"The configuration for extracting the C abstract syntax tree(s) from a \u0060.h\u0060 header file containing C code."},"cs":{"type":"object","properties":{"WorkingDirectory":{"type":"string"},"output_file":{"type":"string"},"library_name":{"type":"string"},"namespace_name":{"type":"string"},"class_name":{"type":"string"},"region_header_file":{"type":"string"},"region_footer_file":{"type":"string"},"mapped":{"type":"array","items":{"type":"object","properties":{"source":{"type":"string"},"target":{"type":"string"}}}},"ignored":{"type":"array","items":{"type":"string"}}},"description":"The configuration for generating C# code."}}}