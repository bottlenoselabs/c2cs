{"type":"object","properties":{"directory":{"type":"string","description":"Path of the input and output abstract syntax tree directory. By default, the directory will be used to write a \u0060.json\u0060 file for each target platform\u0027s abstract syntax tree that has been extracted. By default, the same abstract syntax tree \u0060.json\u0060 files will then be read when generating C# code."},"ast":{"type":"object","properties":{"WorkingDirectory":{"type":"string"},"OutputFileDirectory":{"type":"string","description":"Path of the output abstract syntax tree directory. The directory will contain one or more generated abstract syntax tree \u0060.json\u0060 files which each have a file name of the target platform."},"input_file":{"type":"string","description":"Path of the input \u0060.h\u0060 header file containing C code."},"include_directories":{"type":"array","items":{"type":"string","description":"The directories to search for non-system header files."},"description":"The directories to search for non-system header files."},"platforms":{"type":"object","additionalProperties":{"type":"object","properties":{"system_include_directories":{"type":"array","items":{"type":"string","description":"The directories to search for system header files of the target platform."},"description":"The directories to search for system header files of the target platform."},"include_directories":{"type":"array","items":{"type":"string","description":"The directories to search for non-system header files specific to the target platform."},"description":"The directories to search for non-system header files specific to the target platform."},"defines":{"type":"array","items":{"type":"string","description":"Object-like macros to use when parsing C code."},"description":"Object-like macros to use when parsing C code."},"exclude":{"type":"array","items":{"type":"string","description":"C header file names to exclude. File names are relative to the \u0060IncludeDirectories\u0060 property."},"description":"C header file names to exclude. File names are relative to the \u0060IncludeDirectories\u0060 property."},"function_names":{"type":"array","items":{"type":"string","description":"The C function names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u003C\u0060, no white list applies. Note that C function names which are excluded also exclude any transitive types."},"description":"The C function names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u003C\u0060, no white list applies. Note that C function names which are excluded also exclude any transitive types."},"opaque_names":{"type":"array","items":{"type":"string","description":"Type names that may be found when parsing C code that will be interpreted as opaque types. Opaque types are often used with a pointer to hide the information about the bit layout behind the pointer."},"description":"Type names that may be found when parsing C code that will be interpreted as opaque types. Opaque types are often used with a pointer to hide the information about the bit layout behind the pointer."},"clang_arguments":{"type":"array","items":{"type":"string","description":"Additional Clang arguments to use when parsing C code."},"description":"Additional Clang arguments to use when parsing C code."}},"description":"The target platform configurations for extracting the abstract syntax trees. Each target platform is a Clang target triple. See the C2CS docs for more details about what target platforms are available."},"description":"The target platform configurations for extracting the abstract syntax trees. Each target platform is a Clang target triple. See the C2CS docs for more details about what target platforms are available."}},"description":"The configuration for reading the \u0060.h\u0060 C header file."},"cs":{"type":"object","properties":{"WorkingDirectory":{"type":"string"},"output_file":{"type":"string","description":"Path of the output C# \u0060.cs\u0060 file."},"library_name":{"type":"string","description":"The name of the dynamic link library (without the file extension) used for platform invoke (P/Invoke) with C#. If not specified, the library name is the same as the name of the \u0060OutputFilePath\u0060 property without the directory name and without the file extension."},"namespace_name":{"type":"string","description":"The name of the namespace to be used for the C# static class. If not specified, the namespace is the same as the \u0060LibraryName\u0060 property."},"class_name":{"type":"string","description":"The name of the C# static class. If not specified, the class name is the same as the \u0060LibraryName\u0060 property."},"region_header_file":{"type":"string","description":"Path of the text file which to add the file\u0027s contents to the top of the C# file. Useful for comments, extra namespace using statements, or additional code that needs to be added to the generated C# file."},"region_footer_file":{"type":"string","description":"Path of the text file which to add the file\u0027s contents to the bottom of the C# file. Useful for comments or additional code that needs to be added to the generated C# file."},"mapped":{"type":"array","items":{"type":"object","properties":{"source":{"type":"string"},"target":{"type":"string"}},"description":"Pairs of strings for re-mapping type names. Each pair has source name and a target name. Does not change the bit layout of types."},"description":"Pairs of strings for re-mapping type names. Each pair has source name and a target name. Does not change the bit layout of types."},"ignored":{"type":"array","items":{"type":"string","description":"Names of types, functions, enums, constants, or anything else that may be found when parsing C code that will be ignored when generating C# code. Type names are ignored after mapping type names using \u0060MappedTypeNames\u0060 property."},"description":"Names of types, functions, enums, constants, or anything else that may be found when parsing C code that will be ignored when generating C# code. Type names are ignored after mapping type names using \u0060MappedTypeNames\u0060 property."}},"description":"The configuration for writing the \u0060.cs\u0060 C# source code file."}}}