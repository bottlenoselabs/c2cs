{"type":"object","properties":{"directory":{"type":"string","description":"Path of the input and output abstract syntax tree directory. By default, the directory will be used to write a \u0060.json\u0060 file for each target platform\u0027s abstract syntax tree that has been extracted. By default, the same abstract syntax tree \u0060.json\u0060 files will then be read when generating C# code."},"c":{"type":"object","properties":{"output_file_directory":{"$ref":"#/$defs/string"},"input_file":{"$ref":"#/$defs/string1"},"user_include_directories":{"$ref":"#/$defs/Nullable\u006011"},"system_include_directories":{"$ref":"#/$defs/Nullable\u006012"},"functions_allowed":{"$ref":"#/$defs/Nullable\u006013"},"macro_objects_allowed":{"$ref":"#/$defs/Nullable\u006014"},"enum_constants_allowed":{"$ref":"#/$defs/Nullable\u006015"},"opaque_types":{"$ref":"#/$defs/Nullable\u006016"},"is_enabled_location_full_paths":{"$ref":"#/$defs/Nullable\u006017"},"is_enabled_functions":{"$ref":"#/$defs/Nullable\u006018"},"is_enabled_macro_objects":{"$ref":"#/$defs/Nullable\u006019"},"is_enabled_enum_constants":{"$ref":"#/$defs/Nullable\u0060110"},"is_enabled_variables":{"$ref":"#/$defs/Nullable\u0060111"},"is_enabled_enums_dangling":{"$ref":"#/$defs/Nullable\u0060112"},"is_enabled_allow_names_with_prefixed_underscore":{"$ref":"#/$defs/Nullable\u0060113"},"is_enabled_system_declarations":{"$ref":"#/$defs/Nullable\u0060114"},"is_enabled_find_target_platform_system_headers":{"$ref":"#/$defs/Nullable\u0060115"},"platforms":{"$ref":"#/$defs/array1"},"frameworks":{"$ref":"#/$defs/Nullable\u0060116"}},"description":"The configuration for reading the \u0060.h\u0060 C header file."},"cs":{"type":"object","properties":{"output_file":{"$ref":"#/$defs/string2"},"library_name":{"$ref":"#/$defs/string3"},"namespace":{"$ref":"#/$defs/string4"},"class_name":{"$ref":"#/$defs/string5"},"region_header_file":{"$ref":"#/$defs/string6"},"region_footer_file":{"$ref":"#/$defs/string7"},"mapped_names":{"$ref":"#/$defs/Nullable\u0060117"},"ignored_names":{"$ref":"#/$defs/Nullable\u0060118"}},"description":"The configuration for writing the \u0060.cs\u0060 C# source code file."}},"$defs":{"string":{"type":"string","description":"Path of the output abstract syntax tree directory. The directory will contain one or more generated abstract syntax tree \u0060.json\u0060 files which each have a file name of the target platform."},"string1":{"type":"string","description":"Path of the input \u0060.h\u0060 header file containing C code."},"Nullable\u00601":{"type":"array","items":{"type":"string"}},"array":{"type":"array","items":{"type":"string"}},"Nullable\u006011":{"type":"array","items":{"type":"string"},"description":"The directories to search for non-system header files.","$ref":"#/$defs/Nullable\u00601"},"Nullable\u006012":{"type":"array","items":{"type":"string"},"description":"The directories to search for system header files.","$ref":"#/$defs/Nullable\u00601"},"Nullable\u006013":{"type":"array","items":{"type":"string"},"description":"The C function names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u0060, all functions found may be included. Note that C function names which are excluded may also exclude any transitive types.","$ref":"#/$defs/Nullable\u00601"},"Nullable\u006014":{"type":"array","items":{"type":"string"},"description":"The C macro object names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u0060, all macro objects found may be included.","$ref":"#/$defs/Nullable\u00601"},"Nullable\u006015":{"type":"array","items":{"type":"string"},"description":"The C enum constant names to explicitly include when parsing C code. Default is \u0060null\u0060. If \u0060null\u0060, all enum constants found may be included.","$ref":"#/$defs/Nullable\u00601"},"Nullable\u006016":{"type":"array","items":{"type":"string"},"description":"Type names that may be found when parsing C code that will be interpreted as opaque types. Opaque types are often used with a pointer to hide the information about the bit layout behind the pointer.","$ref":"#/$defs/Nullable\u00601"},"Nullable\u006017":{"type":"boolean","description":"Determines whether to show the the path of header code locations with full paths or relative paths. Use \u0060true\u0060 to use the full path for header locations. Use \u0060false\u0060 or omit this property to show only relative file paths."},"Nullable\u006018":{"type":"boolean","description":"Determines whether to include or exclude functions. Use \u0060true\u0060 or omit this property to include functions. Use \u0060false\u0060 to exclude functions."},"Nullable\u006019":{"type":"boolean","description":"Determines whether to include or exclude macro objects. Use \u0060true\u0060 or omit this property to include macro objects. Use \u0060false\u0060 to exclude macro objects."},"Nullable\u0060110":{"type":"boolean","description":"Determines whether to include or exclude enum constants. Use \u0060true\u0060 to include enum constants. Use \u0060false\u0060 or omit this property to exclude enum constants."},"Nullable\u0060111":{"type":"boolean","description":"Determines whether to include or exclude variables. Use \u0060true\u0060 or omit this property to include variables. Use \u0060false\u0060 to exclude variables."},"Nullable\u0060112":{"type":"boolean","description":"Determines whether to include or exclude enums that are transitive to a function or variable. Use \u0060true\u0060 to include dangling enums. Use \u0060false\u0060 or omit this property to exclude dangling enums."},"Nullable\u0060113":{"type":"boolean","description":"Determines whether to include or exclude functions, enums, structs, typedefs, etc with a prefixed underscore; such declarations are sometimes considered \u0027non public\u0027. Use \u0060true\u0060 to include declarations with a prefixed underscore. Use \u0060false\u0060 or omit this property to exclude declarations with a prefixed underscore."},"Nullable\u0060114":{"type":"boolean","description":"Determines whether to include or exclude system declarations. Use \u0060true\u0060 to include system functions, enums, typedefs, records, etc. Use \u0060false\u0060 or omit this property to exclude system declarations."},"Nullable\u0060115":{"type":"boolean","description":"Determines whether to automatically find and append the system headers for the target platform. Use \u0060true\u0060 or omit this property to automatically find and append system headers for the target platform. Use \u0060false\u0060 to not find and append system headers for the target platform."},"ReadCodeCConfigurationPlatform":{"type":"object","properties":{"user_include_directories":{"type":"array","items":{"type":"string"},"description":"The directories to search for non-system header files specific to the target platform.","$ref":"#/$defs/Nullable\u00601"},"system_include_directories":{"type":"array","items":{"type":"string"},"description":"The directories to search for system header files of the target platform.","$ref":"#/$defs/Nullable\u00601"},"defines":{"type":"array","items":{"type":"string"},"description":"Object-like macros to use when parsing C code.","$ref":"#/$defs/Nullable\u00601"},"header_files_blocked":{"type":"array","items":{"type":"string"},"description":"C header file paths to exclude. File paths are relative to the \u0060IncludeDirectories\u0060 property.","$ref":"#/$defs/Nullable\u00601"},"clang_arguments":{"type":"array","items":{"type":"string"},"description":"Additional Clang arguments to use when parsing C code.","$ref":"#/$defs/Nullable\u00601"},"frameworks":{"$ref":"#/$defs/Nullable\u0060116"}}},"Nullable\u0060116":{"type":"array","items":{"type":"string"},"description":"Names of libraries and/or interfaces for macOS, iOS, tvOS or watchOS.","$ref":"#/$defs/Nullable\u00601"},"array1":{"type":"object","additionalProperties":{"$ref":"#/$defs/ReadCodeCConfigurationPlatform"},"description":"The target platform configurations for extracting the abstract syntax trees. Each target platform is a Clang target triple. See the C2CS docs for more details about what target platforms are available."},"string2":{"type":"string","description":"Path of the output C# \u0060.cs\u0060 file."},"string3":{"type":"string","description":"The name of the dynamic link library (without the file extension) used for platform invoke (P/Invoke) with C#. If not specified, the library name is the same as the name of the \u0060OutputFilePath\u0060 property without the directory name and without the file extension."},"string4":{"type":"string","description":"The name of the namespace to be used for the C# static class. If not specified, the namespace is the same as the \u0060LibraryName\u0060 property."},"string5":{"type":"string","description":"The name of the C# static class. If not specified, the class name is the same as the \u0060LibraryName\u0060 property."},"string6":{"type":"string","description":"Path of the text file which to add the file\u0027s contents to the top of the C# file. Useful for comments, extra namespace using statements, or additional code that needs to be added to the generated C# file."},"string7":{"type":"string","description":"Path of the text file which to add the file\u0027s contents to the bottom of the C# file. Useful for comments or additional code that needs to be added to the generated C# file."},"array2":{"type":"array","items":{"type":"object","properties":{"source":{"type":"string"},"target":{"type":"string"}}}},"Nullable\u0060117":{"type":"array","items":{"type":"object","properties":{"source":{"type":"string"},"target":{"type":"string"}}},"description":"Pairs of strings for re-mapping names. Each pair has source name and a target name. Does not change the bit layout of types."},"Nullable\u0060118":{"type":"array","items":{"type":"string"},"description":"Names of types, functions, enums, constants, or anything else that may be found when parsing C code that will be ignored when generating C# code. Type names are ignored after mapping type names using \u0060MappedTypeNames\u0060 property.","$ref":"#/$defs/Nullable\u00601"}}}