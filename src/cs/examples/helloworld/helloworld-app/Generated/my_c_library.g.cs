// <auto-generated>
//  This code was generated by the following tool on 2025-02-19 20:34:32 GMT-05:00:
//      https://github.com/bottlenoselabs/c2cs (v0.0.0.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template

#pragma warning disable CS1591
#pragma warning disable CS8981
using Interop.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

#endregion

namespace helloworld;

public static unsafe partial class my_c_library
{
    private const string LibraryName = "my_c_library";

    [LibraryImport(LibraryName, EntryPoint = "hw_hello_world")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_hello_world();

    [LibraryImport(LibraryName, EntryPoint = "hw_invoke_callback1")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_invoke_callback1(hw_callback f, CString s);

    [LibraryImport(LibraryName, EntryPoint = "hw_invoke_callback2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_invoke_callback2(FnPtr_CString_Void f, CString s);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_enum_by_reference")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_enum_by_reference(hw_week_day* e);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_enum_by_value")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_enum_by_value(hw_week_day e);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_integers_by_reference")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_integers_by_reference(ushort* a, uint* b, ulong* c);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_integers_by_value")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_integers_by_value(ushort a, uint b, ulong c);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_string")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_string(CString s);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_struct_by_reference")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_struct_by_reference(hw_event* e);

    [LibraryImport(LibraryName, EntryPoint = "hw_pass_struct_by_value")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void hw_pass_struct_by_value(hw_event e);

    public static readonly CString HW_STRING_POINTER = (CString)"Hello world using UTF-8 string literal from the C library's data segment!"u8;

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct hw_event
    {
        [FieldOffset(0)]
        public hw_event_kind kind; // size = 4

        [FieldOffset(8)]
        public CString string1; // size = 8

        [FieldOffset(16)]
        public CString string2; // size = 8

        [FieldOffset(8)]
        public sbyte s8; // size = 1

        [FieldOffset(8)]
        public byte u8; // size = 1

        [FieldOffset(8)]
        public short s16; // size = 2

        [FieldOffset(8)]
        public ushort u16; // size = 2

        [FieldOffset(8)]
        public int s32; // size = 4

        [FieldOffset(8)]
        public uint u32; // size = 4

        [FieldOffset(8)]
        public long s64; // size = 8

        [FieldOffset(8)]
        public ulong u64; // size = 8

        [FieldOffset(8)] // size = 16
        public fixed sbyte s128[16];

        [FieldOffset(8)] // size = 16
        public fixed byte u128[16];

        [FieldOffset(8)] // size = 32
        public fixed long s256[4];

        [FieldOffset(8)] // size = 32
        public fixed ulong u256[4];

        [FieldOffset(8)]
        public ulong size; // size = 8

        [FieldOffset(8)]
        public CBool boolean; // size = 1
    }

    public enum hw_event_kind : int
    {
        HW_EVENT_KIND_UNKNOWN = 0,
        HW_EVENT_KIND_STRING = 1,
        HW_EVENT_KIND_S8 = 2,
        HW_EVENT_KIND_U8 = 3,
        HW_EVENT_KIND_S16 = 4,
        HW_EVENT_KIND_U16 = 5,
        HW_EVENT_KIND_S32 = 6,
        HW_EVENT_KIND_U32 = 7,
        HW_EVENT_KIND_S64 = 8,
        HW_EVENT_KIND_U64 = 9,
        HW_EVENT_KIND_S128 = 10,
        HW_EVENT_KIND_U128 = 11,
        HW_EVENT_KIND_S256 = 12,
        HW_EVENT_KIND_U256 = 13,
        HW_EVENT_KIND_BOOL = 14,
        _HW_EVENT_KIND_FORCE_U32 = 2147483647
    }

    public enum hw_week_day : int
    {
        HW_WEEK_DAY_UNKNOWN = 0,
        HW_WEEK_DAY_MONDAY = 1,
        HW_WEEK_DAY_TUESDAY = 2,
        HW_WEEK_DAY_WEDNESDAY = 3,
        HW_WEEK_DAY_THURSDAY = 4,
        HW_WEEK_DAY_FRIDAY = 5,
        _HW_WEEK_DAY_FORCE_U32 = 2147483647
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct hw_callback
    {
        public delegate* unmanaged[Cdecl]<CString, void> Pointer;

        public hw_callback(delegate* unmanaged[Cdecl]<CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_CString_Void
    {
        public delegate* unmanaged[Cdecl]<CString, void> Pointer;

        public FnPtr_CString_Void(delegate* unmanaged[Cdecl]<CString, void> pointer)
        {
            Pointer = pointer;
        }
    }
}


